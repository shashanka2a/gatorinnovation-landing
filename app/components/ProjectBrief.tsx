"use client";

import { useState } from "react";
import { Button } from "./ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Badge } from "./ui/badge";
import { Download, FileText, CheckCircle } from "lucide-react";

interface ProjectBriefData {
  targetAudience: string;
  coreFeatures: string[];
  designUX: string;
  platformTech: string;
  successGoals: string;
  projectName: string;
  projectType: string;
  budget: string;
  timeline: string;
}

export default function ProjectBrief({ 
  briefData, 
  onDownloadPDF 
}: { 
  briefData: ProjectBriefData;
  onDownloadPDF: () => void;
}) {
  const [isDownloading, setIsDownloading] = useState(false);

  const handleDownloadPDF = async () => {
    setIsDownloading(true);
    try {
      // Generate PDF content
      const pdfContent = generatePDFContent(briefData);
      
      // Create and download PDF
      const element = document.createElement('a');
      const file = new Blob([pdfContent], { type: 'application/pdf' });
      element.href = URL.createObjectURL(file);
      element.download = `${briefData.projectName}-Project-Brief.pdf`;
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
      
      onDownloadPDF();
    } catch (error) {
      console.error('Error generating PDF:', error);
    } finally {
      setIsDownloading(false);
    }
  };

  const generatePDFContent = (data: ProjectBriefData) => {
    return `
# ${data.projectName} - Project Brief

## Project Overview
- **Type**: ${data.projectType}
- **Budget**: ${data.budget}
- **Timeline**: ${data.timeline}

## Target Audience
${data.targetAudience}

## Core Features
${data.coreFeatures.map(feature => `- ${feature}`).join('\n')}

## Design & UX Requirements
${data.designUX}

## Platform & Technology
${data.platformTech}

## Success Goals
${data.successGoals}

---
Generated by Gator Innovation AI
Date: ${new Date().toLocaleDateString()}
    `;
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-6">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Project Brief Confirmed</h1>
            <p className="text-gray-600">Your project requirements have been finalized</p>
          </div>
          <Button
            onClick={handleDownloadPDF}
            disabled={isDownloading}
            className="bg-gradient-to-r from-[#3B82F6] to-[#8B5CF6] text-white"
          >
            {isDownloading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Generating...
              </>
            ) : (
              <>
                <Download className="w-4 h-4 mr-2" />
                Download PDF
              </>
            )}
          </Button>
        </div>

        {/* Project Overview */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="w-5 h-5" />
              Project Overview
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-3 gap-4">
              <div>
                <label className="text-sm font-medium text-gray-500">Project Name</label>
                <p className="text-lg font-semibold">{briefData.projectName}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-500">Type</label>
                <Badge variant="secondary" className="mt-1">
                  {briefData.projectType}
                </Badge>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-500">Budget</label>
                <p className="text-lg font-semibold">{briefData.budget}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Target Audience */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="w-5 h-5 text-green-500" />
              Target Audience
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 leading-relaxed">{briefData.targetAudience}</p>
          </CardContent>
        </Card>

        {/* Core Features */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="w-5 h-5 text-green-500" />
              Core Features
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2">
              {briefData.coreFeatures.map((feature, index) => (
                <li key={index} className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-[#6366F1] rounded-full mt-2 flex-shrink-0"></div>
                  <span className="text-gray-700">{feature}</span>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>

        {/* Design & UX */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="w-5 h-5 text-green-500" />
              Design & UX Requirements
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 leading-relaxed">{briefData.designUX}</p>
          </CardContent>
        </Card>

        {/* Platform & Technology */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="w-5 h-5 text-green-500" />
              Platform & Technology
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 leading-relaxed">{briefData.platformTech}</p>
          </CardContent>
        </Card>

        {/* Success Goals */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="w-5 h-5 text-green-500" />
              Success Goals
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 leading-relaxed">{briefData.successGoals}</p>
          </CardContent>
        </Card>

        {/* Action Buttons */}
        <div className="flex gap-4 justify-center pt-6">
          <Button
            onClick={handleDownloadPDF}
            disabled={isDownloading}
            className="bg-gradient-to-r from-[#3B82F6] to-[#8B5CF6] text-white px-8"
          >
            {isDownloading ? "Generating PDF..." : "Download Brief as PDF"}
          </Button>
        </div>

        {/* Next Steps */}
        <Card className="mt-8 bg-green-50 border-green-200">
          <CardContent className="pt-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-green-800 mb-2">Next Steps</h3>
              <p className="text-green-700 mb-4">
                Your project brief has been sent to our development team. 
                We'll review your requirements and get back to you within 24 hours with a detailed proposal.
              </p>
              <div className="flex items-center justify-center gap-2 text-sm text-green-600">
                <CheckCircle className="w-4 h-4" />
                <span>Project brief confirmed and submitted</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
